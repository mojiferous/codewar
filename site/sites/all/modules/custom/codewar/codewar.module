<?php
/**
 * handles codewar parsing and output
 * codewar.module
 * 12/13/12 Mojiferous
 */

require_once('code_bot.inc');
require_once('code_map.inc');

/**
 * define our point values, which determine the costs of attributes
 */
define('kLIFE_POINTS', 5);
define('kARMOR_POINTS', 2);
define('kSPEED_POINTS', 5);
define('kRANGED_POINTS', 10);
define('kMID_POINTS', 2);
define('kMINE_POINTS', 10);
define('kBOMB_POINTS', 10);

/**
 * implements hook_menu()
 * @todo add proper access callbacks to check user access to node
 */
function codewar_menu() {
  $items = array();

  $items['node/%node/run'] = array(
    'title' => 'Run Code',
    'description' => t('Run code for bot'),
    'page callback' => 'codewar_run_code',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['code/%/step'] = array(
    'title' => 'Process',
    'description' => t('Process code for bot'),
    'page callback' => 'codewar_process_code',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['code/%node/edit'] = array(
    'title' => 'Edit Code',
    'description' => t('Edit code for bot'),
    'page callback' => 'codewar_render_code',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['code/%node/save'] = array(
    'title' => 'Save Code',
    'description' => t('Save bot code ajax'),
    'page callback' => 'codewar_save_code',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['code/%node/icons'] = array(
    'title' => 'Edit Icons',
    'description' => t('Edit icons for bot'),
    'page callback' => 'codewar_edit_icons_page',
    'page arguments' => array(1),
    'access callback' => true,
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['code/%node/attributes'] = array(
    'title' => 'Edit Attributes',
    'description' => t('Edit attributes for bot'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('codewar_edit_attributes_page', 1),
    'access callback' => true,
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['icon-save/%node/%'] = array(
    'title' => 'Save Icon',
    'description' => t('Save icon for bot'),
    'page callback' => 'codewar_save_icon',
    'page arguments' => array(1, 2),
    'access callback' => true,
    'access arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * builds the code from the body of a node into a json array and saves it to the output field, returns the resulting bot
 * @param $node
 * @return code_bot
 */
function codewar_build_code($node) {
  //load the node body
  $this_body = field_get_items('node', $node, 'body');
  $raw_body = '';

  if(isset($this_body[0])) {
    $raw_body = $this_body[0]['value'];
  }

  //divide the body into lines
  $body_parts = preg_split("/\r\n|\n|\r/", $raw_body);

  //parse the code and transform it into a json array, this is the "built code"
  $this_code = new code_bot($body_parts);
  $this_code->parse_code();

  $code_array = json_encode($this_code->code_array);

  $this_code->code_array = (array)$code_array;

  //save the new value onto the node
  $node->field_output[LANGUAGE_NONE][0]['value'] = $code_array;
  node_save($node);

  return $this_code;
}

/**
 * run the codebot
 * @param $node
 * @return string
 */
function codewar_run_code($node) {
  //build the current code
  $this_code = codewar_build_code($node);

  $this_map = new code_map();

  $this_map->add_new_bot($this_code, 100);

  //the session and cache data for this map uses the current user and the node ids to keep everything unique
  //and to prevent collisions
  global $user;
  $cache_vals = $user->uid.'*'.$node->nid;

  $cache_data = json_encode($this_map);

  //set session variables and cache
  $_SESSION['code_bot*'.$cache_vals] = $cache_data;

  cache_clear_all('code_bot*'.$cache_vals, 'cache', true);
  cache_set('code_bot*'.$cache_vals, $cache_data, 'cache');

  drupal_add_js(array('cache_val' => $cache_vals), 'setting');

  $path = drupal_get_path('module', 'codewar');
  drupal_add_js($path.'/js/codebot.js');

  //add a hidden div for things like our existing icons and save icons
  $output = '<div class="hidden" id="icon-hidey-hole">';

  //add our images within a hidden div, so they are accessible to the javascript
  if(isset($node->field_icon[LANGUAGE_NONE])) {
    $icon_num = 1;
    foreach ($node->field_icon[LANGUAGE_NONE] as $icon_file) {
      if(isset($icon_file['uri'])) {
        //this icon is valid
        $address = file_create_url($icon_file['uri']);

        $output .= '<img src="'.$address.'" id="icon-'.$icon_num.'"/>';
        $icon_num++;
      }
    }
  }

  $output .= '</div>';

  $output .= '<div id="code_result">CODE:<br/></div>';

  return $output;
}

/**
 * process ajax call from js
 * @param $session_value
 * @return string
 */
function codewar_process_code($session_value) {
  $ret_val = '00';

  $session_data = false;

  if(isset($_SESSION['code_bot*'.$session_value])) {
    $session_data = $_SESSION['code_bot*'.$session_value];
  } else {
    $session_data = cache_get('code_bot*'.$session_value);
  }

  if($session_data) {
    //there was data in either the session or the cache
    $this_map = json_decode($session_data);
    $this_map = new code_map($this_map);
    $this_map->handle_bot_turns();

    $session_data = json_encode($this_map);
  }

  $_SESSION['code_bot*'.$session_value] = $session_data;

  return json_encode($ret_val);
  drupal_json_output($ret_val);
}

/**
 * handles saving icon from the javascript icon editor
 * @todo check user permissions to edit this bot
 * @param $node
 * @param $icon_num
 */
function codewar_save_icon($node, $icon_num) {
  $ret_val = '0';
  //grab our raw image data passed from the javascript canvas -- put into a post value
  $raw_data = $_POST['imagedata'];

  $filtered_data = explode(',', $raw_data);
  //this data is posted as "data:image/png;base64,<data>", so we explode on comma

  if(isset($filtered_data[1]) && $icon_num < 10) {
    //make sure there is data and the icon num is within range

    //get the raw data
    $unecoded = base64_decode($filtered_data[1]);

    $image_size = strlen($unecoded);

    if($image_size < 5000) {
      //save the file to the filesystem
      $file = file_save_data($unecoded, 'public://bot_'.$node->nid.'_icon_'.$icon_num.'.png', FILE_EXISTS_RENAME);

      //replace the icon if it exists, otherwise add the icon
      if(isset($node->field_icon[LANGUAGE_NONE][$icon_num])) {
        $node->field_icon[LANGUAGE_NONE][$icon_num] = (array)$file;
      } else {
        $node->field_icon[LANGUAGE_NONE][] = (array)$file;
      }

      try {
        //try/catch wrapped node_save to pass along information
        node_save($node);
      } catch (Exception $e) {
        $ret_val = '2';
      }

    } else {
      $ret_val = '1';
    }

  } else {
    $ret_val = '3';
  }

  drupal_json_output($ret_val);
}

/**
 * ajax page to handle code saving from the ace editor, outputs json status code
 * @param $node
 */
function codewar_save_code($node) {
  $ret_val = '0';


  if(isset($_POST['code_data'])) {
    $node->body[LANGUAGE_NONE][0]['value'] = $_POST['code_data'];

    try {
      //try/catch wrapped node_save to pass along information
      node_save($node);
    } catch (Exception $e) {
      $ret_val = '2';
    }

  } else {
    //there is no code data posted
    $ret_val = '1';
  }

  drupal_json_output($ret_val);
}

/**
 * return the code for a specific codebot, render it into a styled code editor
 * @param object $node
 * @return string
 */
function codewar_render_code($node) {
  $this_body = field_get_items('node', $node, 'body');
  $raw_body = '';

  if(isset($this_body[0])) {
    $raw_body = $this_body[0]['value'];
  }

  //add the ace wrapper
  $output = '<div id="code-body">'.$raw_body.'</div>';
  $output .= '<button id="save-code">Save</button>';

  //add all of our javascript, including the no-conflict minimized ace, and the custom js that sets our editor and the ace settings
  $path = drupal_get_path('module', 'codewar');
  drupal_add_js($path.'/ace/ace.js');
  drupal_add_js($path.'/js/codebot_edit.js');

  //add the ui button
  drupal_add_library('system', 'ui.button');

  //set defaults
  $settings_array = array(
    'codewar' => array(
      'bot_id' => $node->nid
    )
  );
  drupal_add_js($settings_array, 'setting');

  return $output;
}

/**
 * Codebot attribute edit form
 * @param $form
 * @param $form_state
 * @param $node
 * @return mixed
 */
function codewar_edit_attributes_page($form, &$form_state, $node) {
  //add the jQueryUI libraries
  drupal_add_library('system', 'ui.button');
  drupal_add_library('system', 'ui.slider');
  //add our custom javascript
  $path = drupal_get_path('module', 'codewar');
  drupal_add_js($path.'/js/codebot_attributes.js');

  //@todo max points can be changed to set weight class of bot -- e.g. welter weight may be 10 pts, heavy may be 40, etc.
  $js_vals = array(
    'life_points' => kLIFE_POINTS,
    'armor_points' => kARMOR_POINTS,
    'speed_points' => kSPEED_POINTS,
    'ranged_points' => kRANGED_POINTS,
    'mid_points' => kMID_POINTS,
    'mine_points' => kMINE_POINTS,
    'bomb_points' => kBOMB_POINTS,
    'max_points' => 20
  );
  drupal_add_js(array('codewar_vars' => $js_vals), 'setting');

  global $user;
  //the max points value, and node id will be added to a session variable to prevent user interference
  $_SESSION['bot_'.$user->uid.'_attr_'.$node->nid] = array('max_points' => 20, 'nid' => $node->nid);
  $form['bot_id'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid
  );

  $life_points = isset($node->field_life_level[LANGUAGE_NONE][0]['value']) ? $node->field_life_level[LANGUAGE_NONE][0]['value'] : 0;
  $armor_points = isset($node->field_armor_level[LANGUAGE_NONE][0]['value']) ? $node->field_armor_level[LANGUAGE_NONE][0]['value'] : 0;
  $speed_points = isset($node->field_speed[LANGUAGE_NONE][0]['value']) ? $node->field_speed[LANGUAGE_NONE][0]['value'] : 0;
  $ranged_points = isset($node->field_ranged_weapon[LANGUAGE_NONE][0]['value']) ? $node->field_ranged_weapon[LANGUAGE_NONE][0]['value'] : 0;
  $mid_points = isset($node->field_mid_range_attack_weapon[LANGUAGE_NONE][0]['value']) ? $node->field_mid_range_attack_weapon[LANGUAGE_NONE][0]['value'] : 0;
  $mine_points = isset($node->field_mine_weapon[LANGUAGE_NONE][0]['value']) ? $node->field_mine_weapon[LANGUAGE_NONE][0]['value'] : 0;
  $bomb_points = isset($node->field_bomb_weapon[LANGUAGE_NONE][0]['value']) ? $node->field_bomb_weapon[LANGUAGE_NONE][0]['value'] : 0;

  //calculate the total points used,
  //assuming that each 5+ in life is 5 points (and the base of 5 is 0)
  //each additional armor point is 2 points
  //each increase in speed of 1 is 5 points
  //the ranged weapon is 10 points
  //the mid-range (spear) weapon is 2 points
  //the mine weapon is 10 points
  //the bomb weapon is 10 points
  $tot_points = ($life_points*kLIFE_POINTS) + ($armor_points*kARMOR_POINTS) + ($speed_points*kSPEED_POINTS) + ($ranged_points*kRANGED_POINTS) + ($mid_points*kMID_POINTS) + ($mine_points*kMINE_POINTS) + ($bomb_points*kBOMB_POINTS);

  $form['life_level'] = array(
    '#type' => 'radios',
    '#title' => t('Life Points'),
    '#default_value' => $life_points,
    '#options' => array(0 => '5', 1 => '10', 2 => '15'),
  );

  $form['armor_level'] = array(
    '#type' => 'textfield',
    '#title' => t('Armor Points'),
    '#default_value' => $armor_points,
    '#size' => 2,
    '#maxlength' => 2,
    '#suffix' => '<div class="form-item slider-container"><div id="armor-slider"></div></div>'
  );

  $form['speed_level'] = array(
    '#type' => 'radios',
    '#title' => t('Speed Points'),
    '#default_value' => $speed_points,
    '#options' => array(0 => '1', 1 => '2', 2 => '3'),
  );

  $form['ranged_weapon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Ranged Weapon'),
    '#default_value' => $ranged_points,
  );

  $form['short_weapon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Short Range Attack Weapon'),
    '#default_value' => 1,
    '#disabled' => true,
  );

  $form['mid_weapon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mid-range Attack Weapon'),
    '#default_value' => $mid_points,
  );

  $form['mine_weapon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mines'),
    '#default_value' => $mine_points,
  );

  $form['bomb_weapon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Bombs'),
    '#default_value' => $bomb_points,
  );

  $form['points_used'] = array(
    '#markup' => $tot_points,
    '#prefix' => '<div class="form-item"><h3>Total Points</h3><div id="total-points">',
    '#suffix' => '</div></div>'
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * validate attribute form
 * @param $form
 * @param $form_state
 */
function codewar_edit_attributes_page_validate($form, &$form_state) {
  $vals = $form_state['values'];

  $point_cost = 0;

  //calculate the total points used,
  //assuming that each 5+ in life is 5 points (and the base of 5 is 0)
  //each additional armor point is 2 points
  //each increase in speed of 1 is 5 points
  //the ranged weapon is 10 points
  //the mid-range (spear) weapon is 2 points
  //the mine weapon is 10 points
  //the bomb weapon is 10 points
  $point_cost += isset($vals['life_level']) ? ($vals['life_level'] * kLIFE_POINTS) : 0;
  $point_cost += isset($vals['armor_level']) ? ($vals['armor_level'] * kARMOR_POINTS) : 0;
  $point_cost += isset($vals['speed_level']) ? ($vals['speed_level'] * kSPEED_POINTS) : 0;
  $point_cost += isset($vals['ranged_weapon']) ? ($vals['ranged_weapon'] * kRANGED_POINTS) : 0;
  $point_cost += isset($vals['mid_weapon']) ? ($vals['mid_weapon'] * kMID_POINTS) : 0;
  $point_cost += isset($vals['mine_weapon']) ? ($vals['mine_weapon'] * kMINE_POINTS) : 0;
  $point_cost += isset($vals['bomb_weapon']) ? ($vals['bomb_weapon'] * kBOMB_POINTS) : 0;

  global $user;
  if(isset($vals['bot_id']) && isset($_SESSION['bot_'.$user->uid.'_attr_'.$vals['bot_id']]['max_points'])) {
    //to prevent user spoofing and accidental editing of other user's bots, we do multiple checks here and store variables in the
    //session variable instead of hidden values on the form
    $max_val = $_SESSION['bot_'.$user->uid.'_attr_'.$vals['bot_id']]['max_points'];

    if($point_cost > $max_val) {
      form_set_error('', 'Attribute points exceed maximum allowed! (Max: '.$max_val.')');
    }
  } else {
    form_set_error('', 'Internal error, form bot does not match internal data.');

    //log an error into the logs
    $num = isset($vals['bot_id']) ? $vals['bot_id'] : 'UNDEFINED';
    watchdog('codewar', 'Attribute page editing error, bot #'.$num);
  }
}

/**
 * submit handler for attributes form
 * @param $form
 * @param $form_state
 */
function codewar_edit_attributes_page_submit($form, $form_state) {
  $vals = $form_state['values'];

  global $user;
  if(isset($vals['bot_id']) && isset($_SESSION['bot_'.$user->uid.'_attr_'.$vals['bot_id']]['max_points'])) {
    //to prevent user spoofing and accidental editing of other user's bots, we do multiple checks here and store variables in the
    //session variable instead of hidden values on the form
    $this_nid = $_SESSION['bot_'.$user->uid.'_attr_'.$vals['bot_id']]['nid'];

    //get our total points, which we store on the resource_points field
    $point_cost = 0;
    $point_cost += isset($vals['life_level']) ? ($vals['life_level'] * kLIFE_POINTS) : 0;
    $point_cost += isset($vals['armor_level']) ? ($vals['armor_level'] * kARMOR_POINTS) : 0;
    $point_cost += isset($vals['speed_level']) ? ($vals['speed_level'] * kSPEED_POINTS) : 0;
    $point_cost += isset($vals['ranged_weapon']) ? ($vals['ranged_weapon'] * kRANGED_POINTS) : 0;
    $point_cost += isset($vals['mid_weapon']) ? ($vals['mid_weapon'] * kMID_POINTS) : 0;
    $point_cost += isset($vals['mine_weapon']) ? ($vals['mine_weapon'] * kMINE_POINTS) : 0;
    $point_cost += isset($vals['bomb_weapon']) ? ($vals['bomb_weapon'] * kBOMB_POINTS) : 0;

    $this_bot = node_load($this_nid);
    $this_bot->field_resource_points[LANGUAGE_NONE][0]['value'] = $point_cost;
    $this_bot->field_life_level[LANGUAGE_NONE][0]['value'] = isset($vals['life_level']) ? $vals['life_level'] : 0;
    $this_bot->field_armor_level[LANGUAGE_NONE][0]['value'] = isset($vals['armor_level']) ? $vals['armor_level'] : 0;
    $this_bot->field_speed[LANGUAGE_NONE][0]['value'] = isset($vals['speed_level']) ? $vals['speed_level'] : 0;
    $this_bot->field_ranged_weapon[LANGUAGE_NONE][0]['value'] = isset($vals['ranged_weapon']) ? $vals['ranged_weapon'] : 0;
    $this_bot->field_mid_range_attack_weapon[LANGUAGE_NONE][0]['value'] = isset($vals['mid_weapon']) ? $vals['mid_weapon'] : 0;
    $this_bot->field_mine_weapon[LANGUAGE_NONE][0]['value'] = isset($vals['mine_weapon']) ? $vals['mine_weapon'] : 0;
    $this_bot->field_bomb_weapon[LANGUAGE_NONE][0]['value'] = isset($vals['bomb_weapon']) ? $vals['bomb_weapon'] : 0;

    node_save($this_bot);

  }
}

/**
 * print out the icon editor for the codebot node
 * @param object $node
 * @return string
 */
function codewar_edit_icons_page($node) {

  //add a hidden div for things like our existing icons and save icons
  $output = '<div class="hidden" id="icon-hidey-hole">';

  //add our images within a hidden div, so they are accessible to the javascript
  if(isset($node->field_icon[LANGUAGE_NONE])) {
    $icon_num = 1;
    foreach ($node->field_icon[LANGUAGE_NONE] as $icon_file) {
      if(isset($icon_file['uri'])) {
        //this icon is valid
        $address = file_create_url($icon_file['uri']);

        $output .= '<img src="'.$address.'" id="icon-'.$icon_num.'"/>';
        $icon_num++;
      }
    }
  }

  //add the hidden save image canvas
  $output .= '<canvas id="save-canvas" width="32" height="32"></canvas>';
  //add the hidden pixel value canvas
  $output .= '<canvas id="hidden-icon" width="32" height="320"></canvas>';
  $output .= '</div>';


  //add the icon chooser canvas
  $output .= '<canvas id="chooser-canvas" width="100" height="400"></canvas>';
  //add the icon canvas
  $output .= '<canvas id="icon-canvas" width="354" height="354"></canvas>';
  //add our spectrum chooser
  $output .= '<input type="text" id="chose-color"/>';
  //add the 'save' button
  $output .= '<input type="button" id="save-icon" value="Save"/>';

  $path = drupal_get_path('module', 'codewar');
  drupal_add_css($path.'/spectrum/spectrum.css');
  drupal_add_js($path.'/spectrum/spectrum.js');
  drupal_add_js($path.'/js/codebot_icons.js');

  //set defaults, set here so we can change the image being edited from code later...
  $settings_array = array(
    'codewar' => array(
      'selected_icon' => 0,
      'bot_id' => $node->nid
    )
  );
  drupal_add_js($settings_array, 'setting');

  return $output;
}