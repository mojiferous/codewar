<?php
/**
 * @file
 * Install, update and uninstall functions for the standard install profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function e3_install() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
      // Pathologic filter
      'pathologic' => array(
        'weight' => 50,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);

  // TinyMCE Configuration
  $wysiwyg_settings = array(
    'default' => 1,
    'user_choose' => 0,
    'show_toggle' => 1,
    'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'bold' => 1,
        'italic' => 1,
        'strikethrough' => 1,
        'justifyleft' => 1,
        'justifycenter' => 1,
        'justifyright' => 1,
        'justifyfull' => 1,
        'bullist' => 1,
        'numlist' => 1,
        'outdent' => 1,
        'indent' => 1,
        'link' => 1,
        'unlink' => 1,
        'anchor' => 1,
        'image' => 1,
        'sup' => 1,
        'sub' => 1,
        'blockquote' => 1,
        'code' => 1,
        'hr' => 1,
        'removeformat' => 1,
        'charmap' => 1,
        'help' => 1
      ),
      'advimage' => array(
        'advimage' => 1
      ),
      'advlink' => array(
        'advlink' => 1
      ),
      'font' => array(
        'formatselect' => 1,
        'styleselect' => 1
      ),
      'paste' => array(
        'pastetext' => 1
      ),
      'table' => array(
        'tablecontrols' => 1
      ),
      'imce' => array(
        'imce' => 1
      ),
    ),
    'toolbar_loc' => top,
    'toolbar_align' => left,
    'path_loc' => bottom,
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 1,
    'apply_source_formatting' => 1,
    'paste_auto_cleanup_on_paste' => 1,
    'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
    'css_setting' => none,
    'css_path' => '',
    'css_classes' => 'Bold Accent = bold-accent\nButton Link = btn-link',
  );
  // Set the fields to update in the database
  $wysiwyg_fields = array(
    'format' => 'full_html',
    'editor' => 'tinymce',
    'settings' => serialize($wysiwyg_settings),
  );
  db_insert('wysiwyg')->fields($wysiwyg_fields)->execute();

  // Enable some standard blocks.
  $default_theme = variable_get('theme_default', 'e3_zen');
  $admin_theme = 'seven';
  $blocks = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Static Page'),
      'base' => 'node_content',
      'description' => st("Use <em>static pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Insert default pre-defined RDF mapping into the database.
  $rdf_mappings = array(
    array(
      'type' => 'node',
      'bundle' => 'page',
      'mapping' => array(
        'rdftype' => array('foaf:Document'),
      ),
    ),
  );
  foreach ($rdf_mappings as $rdf_mapping) {
    rdf_mapping_save($rdf_mapping);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('node_options_webform', array('status'));

  // Don't display date and author information by default.
  variable_set('node_submitted_page', FALSE);
  variable_set('node_submitted_webform', FALSE);

  // Enable user picture support and set the default to a square thumbnail option.
  variable_set('user_pictures', '0');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  $full_html_permission = filter_permission_name($full_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', $filtered_html_permission));

  // Create content admin role and assign it with default permissions
  $content_role = new stdClass();
  $content_role->name = 'content admin';
  $content_role->weight = 2;
  user_role_save($content_role);
  user_role_grant_permissions($content_role->rid, array('access administration menu', 'administer blocks', 'access contextual links', 'administer menu', 'create url aliases', 'access content overview','access all webform results', 'administer nodes', 'administer shortcuts', 'administer taxonomy', 'administer users', 'bypass node access', 'customize shortcut links', 'delete all webform submissions', 'delete revisions', 'revert revisions', 'select account cancellation method', 'switch shortcut sets', 'view revisions', 'access own webform results', 'access own webform submissions', 'access user profiles', 'view the administration theme', 'bypass node access', $full_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 3;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

  // Allow users to login with email addresses
  variable_set('logintoboggan_login_with_email', '1');
  // Allow logintoboggan to redirect unauthorized page access to the login page
  variable_set('site_403', 'toboggan/denied');
  e3_update_settings_values();
}


function e3_update_settings_values() {
  $envs = array('develop', 'staging', 'production');

  foreach($envs as $env) {
    $settings = array();
    _add_settings($settings, 'drupal_hash_salt', drupal_get_hash_salt());
    _add_settings_conf($settings, 'file_private_path', '../../shared/private');
    _add_settings_conf($settings, 'file_temporary_path', '../../shared/private/tmp');

    switch($env) {
      case 'develop':
        _add_settings_conf($settings, 'preprocess_css', 0);
        _add_settings_conf($settings, 'preprocess_js', 0);
        _add_settings_conf($settings, 'googleanalytics_account', '');
        break;
      case 'staging':
        _add_settings_conf($settings, 'preprocess_css', 1);
        _add_settings_conf($settings, 'preprocess_js', 1);
        _add_settings_conf($settings, 'googleanalytics_account', '');
        break;
      case 'production':
        _add_settings_conf($settings, 'preprocess_css', 1);
        _add_settings_conf($settings, 'preprocess_js', 1);
        _add_settings_conf($settings, 'error_level', 0);
        break;
    }
    drupal_rewrite_settings($settings, $env.'.');
  }

}

function _add_settings(&$settings, $alias, $value) {
  $settings[$alias] = array(
    'value'    => $value,
    'required' => TRUE,
  );
}

function _add_settings_conf(&$settings, $alias, $value) {
  _add_settings($settings, "conf['$alias']", $value);
}